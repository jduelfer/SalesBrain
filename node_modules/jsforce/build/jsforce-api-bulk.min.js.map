{"version":3,"file":"jsforce-api-bulk.min.js","sources":["jsforce-api-bulk.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Bulk","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"process","inherits","stream","Duplex","events","_","RecordStream","Promise","HttpApi","Job","bulk","type","operation","options","jobId","_bulk","id","state","_batches","EventEmitter","prototype","info","callback","_jobInfo","check","thenCall","open","_logger","toLowerCase","body","extIdField","concurrencyMode","assignmentRuleId","join","_request","method","path","headers","Content-Type","responseType","then","res","emit","jobInfo","err","createBatch","batch","Batch","on","batchId","logger","_waitAssign","debug","object","resolve","list","batchInfoList","batchInfo","isArray","close","_changeState","abort","job","super_","objectMode","_deferred","defer","_setupDataStreams","Writable","converterOptions","nullValue","_uploadStream","Serializable","_uploadDataStream","_downloadStream","Parsable","_downloadDataStream","end","once","pipe","_createRequestStream","dataStream","_dataStream","_write","data","enc","cb","write","read","push","_read","size","chunk","record","clone","Id","attributes","run","exec","execute","input","_result","rdeferred","promise","reject","isObject","isFunction","forEach","isString","onResolved","onReject","onProgress","nextTick","poll","interval","timeout","startTime","Date","getTime","now","name","parseInt","numberRecordsProcessed","retrieve","stateMessage","setTimeout","results","_conn","result","map","ret","success","Success","errors","fail","resultId","resultStream","resultDataStream","BulkApi","apply","arguments","beforeSend","request","accessToken","isSessionExpired","response","statusCode","test","hasErrorInResponseBody","error","parseError","errorCode","exceptionCode","message","exceptionMessage","conn","pollInterval","pollTimeout","baseUrl","instanceUrl","version","url","load","constructor","Object","createJob","cleanup","cleanupOnError","query","soql","m","replace","match","recordStream","_process",2,"cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","len","clearTimeout","Item","fun","array","noop","args","Array","title","browser","env","argv","versions","addListener","off","removeListener","removeAllListeners","binding","cwd","chdir","dir","umask"],"mappings":"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","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g=(g.jsforce||(g.jsforce = {}));g=(g.modules||(g.modules = {}));g=(g.api||(g.api = {}));g.Bulk = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (process){\n/*global process*/\n/**\n * @file Manages Salesforce Bulk API related operations\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar inherits     = jsforce.require('inherits'),\n    stream       = jsforce.require('readable-stream'),\n    Duplex       = stream.Duplex,\n    events       = jsforce.require('events'),\n    _            = jsforce.require('underscore'),\n    RecordStream = jsforce.require('./record-stream'),\n    CSV          = jsforce.require('./csv'),\n    Promise      = jsforce.require('./promise'),\n    HttpApi      = jsforce.require('./http-api');\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API Job\n *\n * @protected\n * @class Bulk~Job\n * @extends events.EventEmitter\n *\n * @param {Bulk} bulk - Bulk API object\n * @param {String} [type] - SObject type\n * @param {String} [operation] - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {String} [jobId] - Job ID (if already available)\n */\nvar Job = function(bulk, type, operation, options, jobId) {\n  this._bulk = bulk;\n  this.type = type;\n  this.operation = operation;\n  this.options = options || {};\n  this.id = jobId;\n  this.state = this.id ? 'Open' : 'Unknown';\n  this._batches = {};\n};\n\ninherits(Job, events.EventEmitter);\n\n/**\n * @typedef {Object} Bulk~JobInfo\n * @prop {String} id - Job ID\n * @prop {String} object - Object type name\n * @prop {String} operation - Operation type of the job\n * @prop {String} state - Job status\n */\n\n/**\n * Return latest jobInfo from cache\n *\n * @method Bulk~Job#open\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.info = function(callback) {\n  var self = this;\n  // if cache is not available, check the latest\n  if (!this._jobInfo) {\n    this._jobInfo = this.check();\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Open new job and get jobinfo\n *\n * @method Bulk~Job#open\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.open = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  // if not requested opening job\n  if (!this._jobInfo) {\n    var operation = this.operation.toLowerCase();\n    if (operation === 'harddelete') { operation = 'hardDelete'; }\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<operation>' + operation + '</operation>',\n        '<object>' + this.type + '</object>',\n        (this.options.extIdField ?\n         '<externalIdFieldName>'+this.options.extIdField+'</externalIdFieldName>' :\n         ''),\n        (this.options.concurrencyMode ?\n         '<concurrencyMode>'+this.options.concurrencyMode+'</concurrencyMode>' :\n         ''),\n        (this.options.assignmentRuleId ?\n          '<assignmentRuleId>' + this.options.assignmentRuleId + '</assignmentRuleId>' :\n          ''),\n        '<contentType>CSV</contentType>',\n      '</jobInfo>'\n    ].join('');\n\n    this._jobInfo = bulk._request({\n      method : 'POST',\n      path : \"/job\",\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    }).then(function(res) {\n      self.emit(\"open\", res.jobInfo);\n      self.id = res.jobInfo.id;\n      self.state = res.jobInfo.state;\n      return res.jobInfo;\n    }, function(err) {\n      self.emit(\"error\", err);\n      throw err;\n    });\n  }\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Create a new batch instance in the job\n *\n * @method Bulk~Job#createBatch\n * @returns {Bulk~Batch}\n */\nJob.prototype.createBatch = function() {\n  var batch = new Batch(this);\n  var self = this;\n  batch.on('queue', function() {\n    self._batches[batch.id] = batch;\n  });\n  return batch;\n};\n\n/**\n * Get a batch instance specified by given batch ID\n *\n * @method Bulk~Job#batch\n * @param {String} batchId - Batch ID\n * @returns {Bulk~Batch}\n */\nJob.prototype.batch = function(batchId) {\n  var batch = this._batches[batchId];\n  if (!batch) {\n    batch = new Batch(this, batchId);\n    this._batches[batchId] = batch;\n  }\n  return batch;\n};\n\n/**\n * Check the latest job status from server\n *\n * @method Bulk~Job#check\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id,\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.id = res.jobInfo.id;\n    self.type = res.jobInfo.object;\n    self.operation = res.jobInfo.operation;\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n};\n\n/**\n * Wait till the job is assigned to server\n *\n * @method Bulk~Job#info\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype._waitAssign = function(callback) {\n  return (this.id ? Promise.resolve({ id: this.id }) : this.open()).thenCall(callback);\n};\n\n\n/**\n * List all registered batch info in job\n *\n * @method Bulk~Job#list\n * @param {Callback.<Array.<Bulk~BatchInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<Bulk~BatchInfo>>}\n */\nJob.prototype.list = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  return this._waitAssign().then(function() {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + self.id + \"/batch\",\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.batchInfoList.batchInfo);\n    var batchInfoList = res.batchInfoList;\n    batchInfoList = _.isArray(batchInfoList.batchInfo) ? batchInfoList.batchInfo : [ batchInfoList.batchInfo ];\n    return batchInfoList;\n  }).thenCall(callback);\n\n};\n\n/**\n * Close opened job\n *\n * @method Bulk~Job#close\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.close = function() {\n  var self = this;\n  return this._changeState(\"Closed\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"close\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * Set the status to abort\n *\n * @method Bulk~Job#abort\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~JobInfo>}\n */\nJob.prototype.abort = function() {\n  var self = this;\n  return this._changeState(\"Aborted\").then(function(jobInfo) {\n    self.id = null;\n    self.emit(\"abort\", jobInfo);\n    return jobInfo;\n  }, function(err) {\n    self.emit(\"error\", err);\n    throw err;\n  });\n};\n\n/**\n * @private\n */\nJob.prototype._changeState = function(state, callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n\n  this._jobInfo = this._waitAssign().then(function() {\n    var body = [\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n      '<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\n        '<state>' + state + '</state>',\n      '</jobInfo>'\n    ].join('');\n    return bulk._request({\n      method : 'POST',\n      path : \"/job/\" + self.id,\n      body : body,\n      headers : {\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\n      },\n      responseType: \"application/xml\"\n    });\n  }).then(function(res) {\n    logger.debug(res.jobInfo);\n    self.state = res.jobInfo.state;\n    return res.jobInfo;\n  });\n  return this._jobInfo.thenCall(callback);\n\n};\n\n\n/*--------------------------------------------*/\n\n/**\n * Batch (extends RecordStream)\n *\n * @protected\n * @class Bulk~Batch\n * @extends {stream.Writable}\n * @implements {Promise.<Array.<RecordResult>>}\n * @param {Bulk~Job} job - Bulk job object\n * @param {String} [batchId] - Batch ID (if already available)\n */\nvar Batch = function(job, batchId) {\n  Batch.super_.call(this, { objectMode: true });\n  this.job = job;\n  this.id = batchId;\n  this._bulk = job._bulk;\n  this._deferred = Promise.defer();\n  this._setupDataStreams();\n};\n\ninherits(Batch, stream.Writable);\n\n\n/**\n * @private\n */\nBatch.prototype._setupDataStreams = function() {\n  var batch = this;\n  var converterOptions = { nullValue : '#N/A' };\n  this._uploadStream = new RecordStream.Serializable();\n  this._uploadDataStream = this._uploadStream.stream('csv', converterOptions);\n  this._downloadStream = new RecordStream.Parsable();\n  this._downloadDataStream = this._downloadStream.stream('csv', converterOptions);\n\n  this.on('finish', function() {\n    batch._uploadStream.end();\n  });\n  this._uploadDataStream.once('readable', function() {\n    batch.job.open().then(function() {\n      // pipe upload data to batch API request stream\n      batch._uploadDataStream.pipe(batch._createRequestStream());\n    });\n  });\n\n  // duplex data stream, opened access to API programmers by Batch#stream()\n  var dataStream = this._dataStream = new Duplex();\n  dataStream._write = function(data, enc, cb) {\n    batch._uploadDataStream.write(data, enc, cb);\n  };\n  dataStream.on('finish', function() {\n    batch._uploadDataStream.end();\n  });\n\n  this._downloadDataStream.on('readable', function() {\n    dataStream.read(0);\n  });\n  this._downloadDataStream.on('end', function() {\n    dataStream.push(null);\n  });\n  dataStream._read = function(size) {\n    var chunk;\n    while ((chunk = batch._downloadDataStream.read()) !== null) {\n      dataStream.push(chunk);\n    }\n  };\n};\n\n/**\n * Connect batch API and create stream instance of request/response\n *\n * @private\n * @returns {stream.Duplex}\n */\nBatch.prototype._createRequestStream = function() {\n  var batch = this;\n  var bulk = batch._bulk;\n  var logger = bulk._logger;\n\n  return bulk._request({\n    method : 'POST',\n    path : \"/job/\" + batch.job.id + \"/batch\",\n    headers: {\n      \"Content-Type\": \"text/csv\"\n    },\n    responseType: \"application/xml\"\n  }, function(err, res) {\n    if (err) {\n      batch.emit('error', err);\n    } else {\n      logger.debug(res.batchInfo);\n      batch.id = res.batchInfo.id;\n      batch.emit('queue', res.batchInfo);\n    }\n  }).stream();\n};\n\n/**\n * Implementation of Writable\n *\n * @override\n * @private\n */\nBatch.prototype._write = function(record, enc, cb) {\n  record = _.clone(record);\n  if (this.job.operation === \"insert\") {\n    delete record.Id;\n  } else if (this.job.operation === \"delete\") {\n    record = { Id: record.Id };\n  }\n  delete record.type;\n  delete record.attributes;\n  this._uploadStream.write(record, enc, cb);\n};\n\n/**\n * Returns duplex stream which accepts CSV data input and batch result output\n *\n * @returns {stream.Duplex}\n */\nBatch.prototype.stream = function() {\n  return this._dataStream;\n};\n\n/**\n * Execute batch operation\n *\n * @method Bulk~Batch#execute\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for batch operation. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBatch.prototype.run =\nBatch.prototype.exec =\nBatch.prototype.execute = function(input, callback) {\n  var self = this;\n\n  if (typeof input === 'function') { // if input argument is omitted\n    callback = input;\n    input = null;\n  }\n\n  // if batch is already executed\n  if (this._result) {\n    throw new Error(\"Batch already executed.\");\n  }\n\n  var rdeferred = Promise.defer();\n  this._result = rdeferred.promise;\n  this._result.then(function(res) {\n    self._deferred.resolve(res);\n  }, function(err) {\n    self._deferred.reject(err);\n  });\n  this.once('response', function(res) {\n    rdeferred.resolve(res);\n  });\n  this.once('error', function(err) {\n    rdeferred.reject(err);\n  });\n\n  if (_.isObject(input) && _.isFunction(input.pipe)) { // if input has stream.Readable interface\n    input.pipe(this._dataStream);\n  } else {\n    var data;\n    if (_.isArray(input)) {\n      _.forEach(input, function(record) { self.write(record); });\n      self.end();\n    } else if (_.isString(input)){\n      data = input;\n      this._dataStream.write(data, 'utf8');\n      this._dataStream.end();\n    }\n  }\n\n  // return Batch instance for chaining\n  return this.thenCall(callback);\n};\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Bulk~Batch#then\n */\nBatch.prototype.then = function(onResolved, onReject, onProgress) {\n  return this._deferred.promise.then(onResolved, onReject, onProgress);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Bulk~Batch#thenCall\n */\nBatch.prototype.thenCall = function(callback) {\n  if (_.isFunction(callback)) {\n    this.then(function(res) {\n      process.nextTick(function() {\n        callback(null, res);\n      });\n    }, function(err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    });\n  }\n  return this;\n};\n\n/**\n * @typedef {Object} Bulk~BatchInfo\n * @prop {String} id - Batch ID\n * @prop {String} jobId - Job ID\n * @prop {String} state - Batch state\n * @prop {String} stateMessage - Batch state message\n */\n\n/**\n * Check the latest batch status in server\n *\n * @method Bulk~Batch#check\n * @param {Callback.<Bulk~BatchInfo>} [callback] - Callback function\n * @returns {Promise.<Bulk~BatchInfo>}\n */\nBatch.prototype.check = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var logger = bulk._logger;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  return bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId,\n    responseType: \"application/xml\"\n  }).then(function(res) {\n    logger.debug(res.batchInfo);\n    return res.batchInfo;\n  }).thenCall(callback);\n};\n\n\n/**\n * Polling the batch result and retrieve\n *\n * @method Bulk~Batch#poll\n * @param {Number} interval - Polling interval in milliseconds\n * @param {Number} timeout - Polling timeout in milliseconds\n */\nBatch.prototype.poll = function(interval, timeout) {\n  var self = this;\n  var jobId = this.job.id;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var startTime = new Date().getTime();\n  var poll = function() {\n    var now = new Date().getTime();\n    if (startTime + timeout < now) {\n      var err = new Error(\"Polling time out. Job Id = \" + jobId + \" , batch Id = \" + batchId);\n      err.name = 'PollingTimeout';\n      self.emit('error', err);\n      return;\n    }\n    self.check(function(err, res) {\n      if (err) {\n        self.emit('error', err);\n      } else {\n        if (res.state === \"Failed\") {\n          if (parseInt(res.numberRecordsProcessed, 10) > 0) {\n            self.retrieve();\n          } else {\n            self.emit('error', new Error(res.stateMessage));\n          }\n        } else if (res.state === \"Completed\") {\n          self.retrieve();\n        } else {\n          self.emit('progress', res);\n          setTimeout(poll, interval);\n        }\n      }\n    });\n  };\n  setTimeout(poll, interval);\n};\n\n/**\n * @typedef {Object} Bulk~BatchResultInfo\n * @prop {String} id - Batch result ID\n * @prop {String} batchId - Batch ID which includes this batch result.\n * @prop {String} jobId - Job ID which includes this batch result.\n */\n\n/**\n * Retrieve batch result\n *\n * @method Bulk~Batch#retrieve\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Promise.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>}\n */\nBatch.prototype.retrieve = function(callback) {\n  var self = this;\n  var bulk = this._bulk;\n  var jobId = this.job.id;\n  var job = this.job;\n  var batchId = this.id;\n\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n\n  return job.info().then(function(jobInfo) {\n    return bulk._request({\n      method : 'GET',\n      path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result\"\n    });\n  }).then(function(res) {\n    var results;\n    if (job.operation === 'query') {\n      var conn = bulk._conn;\n      var resultIds = res['result-list'].result;\n      results = res['result-list'].result;\n      results = _.map(_.isArray(results) ? results : [ results ], function(id) {\n        return {\n          id: id,\n          batchId: batchId,\n          jobId: jobId\n        };\n      });\n    } else {\n      results = _.map(res, function(ret) {\n        return {\n          id: ret.Id || null,\n          success: ret.Success === \"true\",\n          errors: ret.Error ? [ ret.Error ] : []\n        };\n      });\n    }\n    self.emit('response', results);\n    return results;\n  }).fail(function(err) {\n    self.emit('error', err);\n    throw err;\n  }).thenCall(callback);\n};\n\n/**\n * Fetch query result as a record stream\n * @param {String} resultId - Result id\n * @returns {RecordStream} - Record stream, convertible to CSV data stream\n */\nBatch.prototype.result = function(resultId) {\n  var jobId = this.job.id;\n  var batchId = this.id;\n  if (!jobId || !batchId) {\n    throw new Error(\"Batch not started.\");\n  }\n  var resultStream = new RecordStream.Parsable();\n  var resultDataStream = resultStream.stream('csv');\n  var reqStream = this._bulk._request({\n    method : 'GET',\n    path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result/\" + resultId\n  }).stream().pipe(resultDataStream);\n  return resultStream;\n};\n\n/*--------------------------------------------*/\n/**\n * @private\n */\nvar BulkApi = function() {\n  BulkApi.super_.apply(this, arguments);\n};\n\ninherits(BulkApi, HttpApi);\n\nBulkApi.prototype.beforeSend = function(request) {\n  request.headers = request.headers || {};\n  request.headers[\"X-SFDC-SESSION\"] = this._conn.accessToken;\n};\n\nBulkApi.prototype.isSessionExpired = function(response) {\n  return response.statusCode === 400 &&\n    /<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(response.body);\n};\n\nBulkApi.prototype.hasErrorInResponseBody = function(body) {\n  return !!body.error;\n};\n\nBulkApi.prototype.parseError = function(body) {\n  return {\n    errorCode: body.error.exceptionCode,\n    message: body.error.exceptionMessage\n  };\n};\n\n/*--------------------------------------------*/\n\n/**\n * Class for Bulk API\n *\n * @class\n * @param {Connection} conn - Connection object\n */\nvar Bulk = function(conn) {\n  this._conn = conn;\n  this._logger = conn._logger;\n};\n\n/**\n * Polling interval in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollInterval = 1000;\n\n/**\n * Polling timeout in milliseconds\n * @type {Number}\n */\nBulk.prototype.pollTimeout = 10000;\n\n/** @private **/\nBulk.prototype._request = function(request, callback) {\n  var conn = this._conn;\n  request = _.clone(request);\n  var baseUrl = [ conn.instanceUrl, \"services/async\", conn.version ].join('/');\n  request.url = baseUrl + request.path;\n  var options = { responseType: request.responseType };\n  delete request.path;\n  delete request.responseType;\n  return new BulkApi(this._conn, options).request(request).thenCall(callback);\n};\n\n/**\n * Create and start bulkload job and batch\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\n * @param {Object} [options] - Options for bulk loading operation\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\n * @returns {Bulk~Batch}\n */\nBulk.prototype.load = function(type, operation, options, input, callback) {\n  var self = this;\n  if (!type || !operation) {\n    throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");\n  }\n  if (!_.isObject(options) || options.constructor !== Object) { // when options is not plain hash object, it is omitted\n    callback = input;\n    input = options;\n    options = null;\n  }\n  var job = this.createJob(type, operation, options);\n  job.once('error', function (error) {\n    if (batch) {\n      batch.emit('error', error); // pass job error to batch\n    }\n  });\n  var batch = job.createBatch();\n  var cleanup = function() {\n    batch = null;\n    job.close();\n  };\n  var cleanupOnError = function(err) {\n    if (err.name !== 'PollingTimeout') {\n      cleanup();\n    }\n  };\n  batch.on('response', cleanup);\n  batch.on('error', cleanupOnError);\n  batch.on('queue', function() { batch.poll(self.pollInterval, self.pollTimeout); });\n  return batch.execute(input, callback);\n};\n\n/**\n * Execute bulk query and get record stream\n *\n * @param {String} soql - SOQL to execute in bulk job\n * @returns {RecordStream.Parsable} - Record stream, convertible to CSV data stream\n */\nBulk.prototype.query = function(soql) {\n  var m = soql.replace(/\\([\\s\\S]+\\)/g, '').match(/FROM\\s+(\\w+)/i);\n  if (!m) {\n    throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");\n  }\n  var type = m[1];\n  var self = this;\n  var recordStream = new RecordStream.Parsable();\n  var dataStream = recordStream.stream('csv');\n  this.load(type, \"query\", soql).then(function(results) {\n    // Ideally, it should merge result files into one stream.\n    // Currently only first batch result is the target (mostly enough).\n    var r = results[0];\n    var result = self.job(r.jobId).batch(r.batchId).result(r.id);\n    result.stream().pipe(dataStream);\n  }).fail(function(err) {\n    recordStream.emit('error', err);\n  });\n  return recordStream;\n};\n\n\n/**\n * Create a new job instance\n *\n * @param {String} type - SObject type\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', 'hardDelete', or 'query')\n * @param {Object} [options] - Options for bulk loading operation\n * @returns {Bulk~Job}\n */\nBulk.prototype.createJob = function(type, operation, options) {\n  return new Job(this, type, operation, options);\n};\n\n/**\n * Get a job instance specified by given job ID\n *\n * @param {String} jobId - Job ID\n * @returns {Bulk~Job}\n */\nBulk.prototype.job = function(jobId) {\n  return new Job(this, null, null, null, jobId);\n};\n\n\n/*--------------------------------------------*/\n\nmodule.exports = Bulk;\n\n}).call(this,require('_process'))\n},{\"_process\":2}],2:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}]},{},[1])(1)\n});"]}